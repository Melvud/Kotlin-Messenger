package com.example.messenger_app.data

import android.content.Context
import android.net.Uri
import android.util.Log
import com.google.firebase.auth.FirebaseAuth
import com.google.firebase.firestore.FieldValue
import com.google.firebase.firestore.FirebaseFirestore
import com.google.firebase.firestore.Query
import com.google.firebase.storage.FirebaseStorage
import kotlinx.coroutines.channels.awaitClose
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.callbackFlow
import kotlinx.coroutines.tasks.await
import java.io.File
import java.util.UUID

/**
 * –†–ï–ü–û–ó–ò–¢–û–†–ò–ô –î–õ–Ø –†–ê–ë–û–¢–´ –° –ß–ê–¢–ê–ú–ò
 * –ü–æ–ª–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤, —Å—Ç–∏–∫–µ—Ä–æ–≤
 */
class ChatRepository(
    private val auth: FirebaseAuth,
    private val db: FirebaseFirestore,
    private val storage: FirebaseStorage
) {
    
    private fun requireUid(): String = auth.currentUser?.uid 
        ?: error("User not authenticated")

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
     */
    suspend fun getOrCreateChat(otherUserId: String): String {
        val myUid = requireUid()
        
        // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —á–∞—Ç –º–µ–∂–¥—É —ç—Ç–∏–º–∏ –¥–≤—É–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        val existingChats = db.collection("chats")
            .whereArrayContains("participants", myUid)
            .get()
            .await()
        
        val existingChat = existingChats.documents.find { doc ->
            val participants = doc.get("participants") as? List<*> ?: emptyList<String>()
            participants.contains(otherUserId) && participants.size == 2
        }
        
        if (existingChat != null) {
            return existingChat.id
        }
        
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç
        val myProfile = db.collection("users").document(myUid).get().await()
        val otherProfile = db.collection("users").document(otherUserId).get().await()
        
        val myName = myProfile.getString("username") ?: myProfile.getString("name") ?: "User"
        val otherName = otherProfile.getString("username") ?: otherProfile.getString("name") ?: "User"
        
        val myPhoto = myProfile.getString("photoUrl")
        val otherPhoto = otherProfile.getString("photoUrl")
        
        val chatData = hashMapOf(
            "participants" to listOf(myUid, otherUserId),
            "participantNames" to mapOf(myUid to myName, otherUserId to otherName),
            "participantPhotos" to mapOf(myUid to myPhoto, otherUserId to otherPhoto),
            "lastMessage" to "",
            "lastMessageTime" to FieldValue.serverTimestamp(),
            "lastMessageSenderId" to "",
            "unreadCount" to mapOf(myUid to 0, otherUserId to 0),
            "typingUsers" to emptyList<String>(),
            "createdAt" to FieldValue.serverTimestamp(),
            "updatedAt" to FieldValue.serverTimestamp()
        )
        
        val newChat = db.collection("chats").add(chatData).await()
        return newChat.id
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Ç–æ–∫ –≤—Å–µ—Ö —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    fun getChatsFlow(): Flow<List<Chat>> = callbackFlow {
        val myUid = requireUid()
        
        val registration = db.collection("chats")
            .whereArrayContains("participants", myUid)
            .orderBy("lastMessageTime", Query.Direction.DESCENDING)
            .addSnapshotListener { snapshot, error ->
                if (error != null) {
                    Log.e("ChatRepository", "Error listening to chats", error)
                    trySend(emptyList())
                    return@addSnapshotListener
                }
                
                val chats = snapshot?.documents?.mapNotNull { it.toChat() } ?: emptyList()
                trySend(chats)
            }
        
        awaitClose { registration.remove() }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Ç–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞
     */
    fun getMessagesFlow(chatId: String): Flow<List<Message>> = callbackFlow {
        val registration = db.collection("chats")
            .document(chatId)
            .collection("messages")
            .orderBy("localTimestamp", Query.Direction.ASCENDING)
            .addSnapshotListener { snapshot, error ->
                if (error != null) {
                    Log.e("ChatRepository", "Error listening to messages", error)
                    trySend(emptyList())
                    return@addSnapshotListener
                }
                
                val messages = snapshot?.documents?.mapNotNull { it.toMessage() } ?: emptyList()
                trySend(messages)
            }
        
        awaitClose { registration.remove() }
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
     */
    suspend fun sendTextMessage(
        chatId: String,
        text: String,
        replyToId: String? = null,
        replyToText: String? = null
    ): String {
        val myUid = requireUid()
        val myProfile = db.collection("users").document(myUid).get().await()
        val myName = myProfile.getString("username") ?: myProfile.getString("name") ?: "User"
        val myPhoto = myProfile.getString("photoUrl")
        
        val messageId = UUID.randomUUID().toString()
        val messageData = hashMapOf(
            "chatId" to chatId,
            "senderId" to myUid,
            "senderName" to myName,
            "senderPhotoUrl" to myPhoto,
            "type" to MessageType.TEXT.name,
            "content" to text,
            "status" to MessageStatus.SENT.name,
            "isEdited" to false,
            "localTimestamp" to System.currentTimeMillis(),
            "timestamp" to FieldValue.serverTimestamp()
        )
        
        if (replyToId != null) {
            messageData["replyToId"] = replyToId
            messageData["replyToText"] = replyToText ?: ""
        }
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        db.collection("chats")
            .document(chatId)
            .collection("messages")
            .document(messageId)
            .set(messageData)
            .await()
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
        updateChatLastMessage(chatId, text, myUid)
        
        return messageId
    }

    /**
     * –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–µ–¥–∏–∞—Ñ–∞–π–ª –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
     */
    suspend fun sendMediaMessage(
        context: Context,
        chatId: String,
        mediaUpload: MediaUpload,
        caption: String? = null
    ): String {
        val myUid = requireUid()
        val myProfile = db.collection("users").document(myUid).get().await()
        val myName = myProfile.getString("username") ?: myProfile.getString("name") ?: "User"
        val myPhoto = myProfile.getString("photoUrl")
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –≤ Firebase Storage
        val fileExtension = mediaUpload.fileName.substringAfterLast(".", "")
        val storagePath = "chats/$chatId/${UUID.randomUUID()}.$fileExtension"
        val storageRef = storage.reference.child(storagePath)
        
        val uploadTask = storageRef.putFile(Uri.parse(mediaUpload.localUri)).await()
        val downloadUrl = storageRef.downloadUrl.await().toString()
        
        // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        val messageId = UUID.randomUUID().toString()
        val messageData = hashMapOf(
            "chatId" to chatId,
            "senderId" to myUid,
            "senderName" to myName,
            "senderPhotoUrl" to myPhoto,
            "type" to mediaUpload.type.name,
            "content" to downloadUrl,
            "fileName" to mediaUpload.fileName,
            "fileSize" to mediaUpload.fileSize,
            "status" to MessageStatus.SENT.name,
            "isEdited" to false,
            "localTimestamp" to System.currentTimeMillis(),
            "timestamp" to FieldValue.serverTimestamp()
        )
        
        if (caption != null && caption.isNotBlank()) {
            messageData["caption"] = caption
        }
        
        db.collection("chats")
            .document(chatId)
            .collection("messages")
            .document(messageId)
            .set(messageData)
            .await()
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        val lastMessageText = when (mediaUpload.type) {
            MessageType.IMAGE -> "üì∑ –§–æ—Ç–æ"
            MessageType.VIDEO -> "üé• –í–∏–¥–µ–æ"
            MessageType.FILE -> "üìé –§–∞–π–ª"
            MessageType.VOICE -> "üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
            MessageType.STICKER -> "–°—Ç–∏–∫–µ—Ä"
            else -> "–ú–µ–¥–∏–∞—Ñ–∞–π–ª"
        }
        updateChatLastMessage(chatId, lastMessageText, myUid)
        
        return messageId
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä
     */
    suspend fun sendSticker(chatId: String, stickerUrl: String): String {
        val myUid = requireUid()
        val myProfile = db.collection("users").document(myUid).get().await()
        val myName = myProfile.getString("username") ?: myProfile.getString("name") ?: "User"
        val myPhoto = myProfile.getString("photoUrl")
        
        val messageId = UUID.randomUUID().toString()
        val messageData = hashMapOf(
            "chatId" to chatId,
            "senderId" to myUid,
            "senderName" to myName,
            "senderPhotoUrl" to myPhoto,
            "type" to MessageType.STICKER.name,
            "content" to stickerUrl,
            "status" to MessageStatus.SENT.name,
            "isEdited" to false,
            "localTimestamp" to System.currentTimeMillis(),
            "timestamp" to FieldValue.serverTimestamp()
        )
        
        db.collection("chats")
            .document(chatId)
            .collection("messages")
            .document(messageId)
            .set(messageData)
            .await()
        
        updateChatLastMessage(chatId, "–°—Ç–∏–∫–µ—Ä", myUid)
        
        return messageId
    }

    /**
     * –ü–æ–º–µ—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
     */
    suspend fun markMessagesAsRead(chatId: String, messageIds: List<String>) {
        val batch = db.batch()
        
        messageIds.forEach { messageId ->
            val messageRef = db.collection("chats")
                .document(chatId)
                .collection("messages")
                .document(messageId)
            batch.update(messageRef, "status", MessageStatus.READ.name)
        }
        
        batch.commit().await()
        
        // –û–±–Ω—É–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        val myUid = requireUid()
        db.collection("chats")
            .document(chatId)
            .update("unreadCount.$myUid", 0)
            .await()
    }

    /**
     * –£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
     */
    suspend fun deleteMessage(chatId: String, messageId: String) {
        db.collection("chats")
            .document(chatId)
            .collection("messages")
            .document(messageId)
            .delete()
            .await()
    }

    /**
     * –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
     */
    suspend fun editMessage(chatId: String, messageId: String, newText: String) {
        db.collection("chats")
            .document(chatId)
            .collection("messages")
            .document(messageId)
            .update(
                mapOf(
                    "content" to newText,
                    "isEdited" to true
                )
            )
            .await()
    }

    /**
     * –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å "–ø–µ—á–∞—Ç–∞–µ—Ç"
     */
    suspend fun setTyping(chatId: String, isTyping: Boolean) {
        val myUid = requireUid()
        
        if (isTyping) {
            db.collection("chats")
                .document(chatId)
                .update("typingUsers", FieldValue.arrayUnion(myUid))
                .await()
        } else {
            db.collection("chats")
                .document(chatId)
                .update("typingUsers", FieldValue.arrayRemove(myUid))
                .await()
        }
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ
     */
    private suspend fun updateChatLastMessage(chatId: String, message: String, senderId: String) {
        db.collection("chats")
            .document(chatId)
            .update(
                mapOf(
                    "lastMessage" to message,
                    "lastMessageTime" to FieldValue.serverTimestamp(),
                    "lastMessageSenderId" to senderId,
                    "updatedAt" to FieldValue.serverTimestamp()
                )
            )
            .await()
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –¥–ª—è –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        val chat = db.collection("chats").document(chatId).get().await()
        val participants = chat.get("participants") as? List<String> ?: emptyList()
        val otherParticipants = participants.filter { it != senderId }
        
        otherParticipants.forEach { participantId ->
            db.collection("chats")
                .document(chatId)
                .update("unreadCount.$participantId", FieldValue.increment(1))
                .await()
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
     */
    suspend fun getChat(chatId: String): Chat? {
        val doc = db.collection("chats").document(chatId).get().await()
        return doc.toChat()
    }

    /**
     * –£–¥–∞–ª–∏—Ç—å —á–∞—Ç
     */
    suspend fun deleteChat(chatId: String) {
        // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        val messages = db.collection("chats")
            .document(chatId)
            .collection("messages")
            .get()
            .await()
        
        val batch = db.batch()
        messages.documents.forEach { doc ->
            batch.delete(doc.reference)
        }
        batch.commit().await()
        
        // –£–¥–∞–ª—è–µ–º —Å–∞–º —á–∞—Ç
        db.collection("chats").document(chatId).delete().await()
    }
}
